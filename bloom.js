caterwaul.module( 'bloom' ,function($) {$.bloom=function(hash_functions,words) {;
return words===1?new $.bloom.single(hash_functions) :new $.bloom.array(hash_functions,words) } ,$.bloom.array=function(hs,words) {;
return(function(it) {return(words instanceof Array? (function(xs) {var x,x0,xi,xl,xr;
for(var xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] , (this[xi] =x) ;
return xs} ) .call(this,words) : (function(xs) {var x,x0,xi,xl,xr;
for(var xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] , (this[x] =0) ;
return xs} ) .call(this, (function(i,u,s) {if( (u-i) *s<=0)return[ ] ;
for(var r= [ ] ,d=u-i;
d>0?i<u:i>u;
i+=s)r.push(i) ;
return r} ) ( (0) , (words) , (1) ) ) ,it.length=words instanceof Array?words.length:words,it.mask= (function(it) {return( ( (it.length&it.length-1) && ( (function( ) {throw new Error( ( 'Caterwaul Bloom filter: ' + (it.length) + ' is not a power of two' ) ) } ) .call(this) ) ) ) ,it} ) .call(this, (it.length-1) ) ,it.hs=hs) ,it} ) .call(this, (this) ) } ,$.merge($.bloom.array.prototype, {set_bit:function(n) {;
return this[n>>>5&this.mask] |= (1<< (n&31) ) } ,get_bit:function(n) {;
return this[n>>>5&this.mask] & (1<< (n&31) ) } ,hash:function() {;
return(function(xs) {var x,x0,xi,xl,xr;
for(var x0=xs[0] ,xi=1,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,x0= (x^x0) ;
return x0} ) .call(this,this) } ,density:function() {;
return(function(xs) {var x,x0,xi,xl,xr;
for(var x0= (0) ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,x0= (x0+ (x-=x>>>1&0x55555555,x= (x&0x33333333) + ( (x>>>2) &0x33333333) , (x+ (x>>>4) &0xf0f0f0f) *0x1010101>>>24) ) ;
return x0} ) .call(this,this) } ,add:function() { ( (function(items) {var item,item0,itemi,iteml,itemr;
for(var itemi=0,iteml=items.length;
itemi<iteml;
 ++itemi)item=items[itemi] , ( (function(xs) {var x,x0,xi,xl,xr;
for(var xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] , (this.set_bit(x(item) ) ) ;
return xs} ) .call(this,this.hs) ) ;
return items} ) .call(this,arguments) ) ;
return this} ,merge:function(f) { ( (function(xs) {var x,x0,xi,xl,xr;
for(var xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] , (this[xi] |=f[xi] ) ;
return xs} ) .call(this,this) ) ;
return this} ,select:function(f) { ( (function(xs) {var x,x0,xi,xl,xr;
for(var xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] , (this[xi] &=f[xi] ) ;
return xs} ) .call(this,this) ) ;
return this} ,contains:function(item) {;
return(function(xs) {var x,x0,xi,xl,xr;
for(var x=xs[0] ,xi=0,xl=xs.length,x1;
xi<xl;
 ++xi) {x=xs[xi] ;
if(x1= ( !this.get_bit(x(item) ) ) )return false}return true} ) .call(this,this.hs) } ,union:function(f) {;
return $.bloom(this.hs, (function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push( (x|f[xi] ) ) ;
return xr} ) .call(this,this) ) } ,intersect:function(f) {;
return $.bloom(this.hs, (function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push( (x&f[xi] ) ) ;
return xr} ) .call(this,this) ) } ,subset:function(f) {;
return(function(xs) {var x,x0,xi,xl,xr;
for(var x=xs[0] ,xi=0,xl=xs.length,x1;
xi<xl;
 ++xi) {x=xs[xi] ;
if(x1= ( (x&f[xi] ) !==x) )return false}return true} ) .call(this,this) } ,reduce_to:function(size) {;
return $.bloom(this.hs, (function( ) {var mask=length-1;
return( (function(it) {return( (function(xs) {var x,x0,xi,xl,xr;
for(var xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] , (it[xi&mask] |=x) ;
return xs} ) .call(this,this) ) ,it} ) .call(this, ( (function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push( (0) ) ;
return xr} ) .call(this, (function(i,u,s) {if( (u-i) *s<=0)return[ ] ;
for(var r= [ ] ,d=u-i;
d>0?i<u:i>u;
i+=s)r.push(i) ;
return r} ) ( (0) , (size) , (1) ) ) ) ) ) } ) .call(this) ) } } ) ,$.bloom.single=function(hs,v) {;
return(function(it) {return(it.value=v||0,it.length=1,it.hs=hs) ,it} ) .call(this, (this) ) } ,$.merge($.bloom.single.prototype, {set_bit:function(n) {;
return this.value|=1<< (n&31) } ,get_bit:function(n) {;
return this.value&1<< (n&31) } ,hash:function() {;
return this.value} ,density:function() {var x=this.value;
return(x-=x>>>1&0x55555555,x= (x&0x33333333) + ( (x>>>2) &0x33333333) , (x+ (x>>>4) &0xf0f0f0f) *0x1010101>>>24) } ,add:function() { ( (function(items) {var item,item0,itemi,iteml,itemr;
for(var itemi=0,iteml=items.length;
itemi<iteml;
 ++itemi)item=items[itemi] , ( (function(xs) {var x,x0,xi,xl,xr;
for(var xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] , (this.set_bit(x(item) ) ) ;
return xs} ) .call(this,this.hs) ) ;
return items} ) .call(this,arguments) ) ;
return this} ,merge:function(f) { (this.value|=f.value) ;
return this} ,select:function(f) { (this.value&=f.value) ;
return this} ,contains:function(item) {;
return(function(xs) {var x,x0,xi,xl,xr;
for(var x=xs[0] ,xi=0,xl=xs.length,x1;
xi<xl;
 ++xi) {x=xs[xi] ;
if(x1= ( !this.get_bit(x(item) ) ) )return false}return true} ) .call(this,this.hs) } ,union:function(f) {;
return new $.bloom.single(this.hs,this.value|f.value) } ,intersect:function(f) {;
return new $.bloom.single(this.hs,this.value&f.value) } ,subset:function(f) {;
return(this.value&f.value) ===this.value} } ) ,$.merge($.bloom, (function( ) {var jenkins_string_hash=function(key) {;
return function(s) {for(var h=key,i=0,l=s.length;
i<l;
 ++i)h+=s.charCodeAt(i) ,h+=h<<10,h^=h>>>6;
return h+=h<<3,h^=h>>>11,h+=h<<15} } ,jenkins_string=function() {var xs=arguments;
return(function(xs) {var x,x0,xi,xl,xr;
for(var xr=new xs.constructor() ,xi=0,xl=xs.length;
xi<xl;
 ++xi)x=xs[xi] ,xr.push( ( (jenkins_string_hash) .call( {x0:x0,xi:xi,xl:xl,xs:xs,xr:xr} ,x) ) ) ;
return xr} ) .call(this,Array.prototype.slice.call( (xs) ) ) } ;
return( {jenkins_string_hash:jenkins_string_hash,jenkins_string:jenkins_string} ) } ) .call(this) ) } ) ;
